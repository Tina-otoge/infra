- set_fact:
    packages_distro: |
      {{
        packages_by_distro
        [ansible_distribution]
        [ansible_distribution_major_version]
        | default([])
      }}
    _packages: "{{ packages_base + packages }}"

- when:
    - ansible_os_family == "RedHat"
    - ansible_pkg_mgr == "dnf"
  block:
    - name: Check if CRB is enabled
      command: dnf repolist crb
      register: _crb_check
      changed_when: false

    - name: Enable CRB
      command: dnf config-manager --set-enabled crb
      when: not _crb_check.stdout.endswith("enabled")

    - name: Check if RPM Fusion is enabled
      command: dnf repolist rpmfusion-free-updates
      register: _rpmfusionfree_check
      changed_when: false

    - name: Enable RPM Fusion Free
      command: dnf install --nogpgcheck https://mirrors.rpmfusion.org/free/el/rpmfusion-free-release-{{ ansible_distribution_major_version }}.noarch.rpm -y
      when: not _rpmfusionfree_check.stdout.endswith("enabled")

    - name: Check if RPM Fusion Nonfree is enabled
      command: dnf repolist rpmfusion-nonfree-updates
      register: _rpmfusionnonfree_check
      changed_when: false

    - name: Enable RPM Fusion Nonfree
      command: dnf install --nogpgcheck https://mirrors.rpmfusion.org/nonfree/el/rpmfusion-nonfree-release-{{ ansible_distribution_major_version }}.noarch.rpm -y
      when: not _rpmfusionnonfree_check.stdout.endswith("enabled")

    - name: Enable CRB
      command: dnf config-manager --set-enabled crb
      when: not _crb_check.stdout.endswith("enabled")

    # - name: Check if ELRepo is enabled
    #   command: dnf repolist elrepo
    #   register: _elrepo_check
    #   changed_when: false

    # - block:
    #   - name: Import ELRepo GPG key
    #     rpm_key:
    #       key: https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
    #       state: present
    #   - name: Enable ELRepo
    #     command: dnf install -y https://www.elrepo.org/elrepo-release-{{ ansible_distribution_major_version }}.el{{ ansible_distribution_major_version }}.elrepo.noarch.rpm
    #   when: not _elrepo_check.stdout.endswith("enabled")

    - name: Check for already installed packages
      command: "rpm -q {{ item.name | default(item) }}"
      loop: "{{ packages_distro }}"
      register: _packages_check
      ignore_errors: true
      changed_when: false
      when: "item.name in _packages"

    - set_fact:
        _packages_to_install: |
          {{ _packages_to_install | default([]) + [item.item] }}
      loop: "{{ _packages_check.results }}"
      when: "'failed' in item and item.failed"

    - community.general.copr:
        name: "{{ item.copr }}"
        chroot: |
          {{
            [
              'epel',
              ansible_distribution_major_version,
              ansible_architecture,
            ] | join('-')
          }}
      loop: "{{ _packages_to_install | default([]) }}"
      when: "'copr' in item"

    - set_fact:
        _packages_to_install_flat: |
          {{
            _packages_to_install_flat | default([])
            + [item.url | default(item.name) | default(item)]
          }}
      loop: "{{ _packages_to_install }}"
      when: _packages_to_install is defined

    # Using command instead of dnf/package module to avoid gpg check fail for
    # direct URLs
    - name: Install distro specific packages with dnf
      command: |
        dnf install -y {{ _packages_to_install_flat | default([]) | join(' ') }}
      when: _packages_to_install is defined

- name: Install packages
  package:
    name: "{{ _packages }}"

- name: Remove packages
  package:
    name: "{{ packages_remove }}"
    state: absent
